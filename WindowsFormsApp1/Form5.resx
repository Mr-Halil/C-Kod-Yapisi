<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        HwfCAQOHwAeAB+AH4A//D/w///////////8=
</value>
  </data>
</root>